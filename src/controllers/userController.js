// ?????????????????????????????????????????????????????????
// ??????????????????? User Controller ?????????????????????
// ?????????????????????????????????????????????????????????

// ??????????????????? File Modules ????????????????????????
// ?? Models
const User = require('../models/userModel')

// ?? Utilites
const AppError = require('../utils/AppError')
const catchAsync = require('../utils/catchAsync')
const factory = require('../utils/factoryHandler')

// ??????????????????? Node Modules ????????????????????????

// ??????????????????? Vendor Modules ??????????????????????


const filterObj = (obj, ...allowedFields) => {

    const newObj = {}

    Object.keys(obj).forEach(el => {
        if (allowedFields.includes(el)) newObj[el] = obj[el]
    })

    return newObj
}

// ~~ Get All Users
exports.getAllUsers = factory.getAll(User)

// ~~ Get User By ID
exports.getUser = factory.getOne(User, null)

// ~~ Get user info (user endpoint)
exports.getMe = (req, res, next) => {

    // ~~ Set param id to user id
    req.params.id = req.user.id
    
    next()
}

// ~~ Create User
exports.createUser = (req, res, next) => {

    res.status(500).json({
        status: "error",
        message: "This route is not defined! Please use /signup instead"
    })
}

// ~~ Update User
exports.updateMe = catchAsync(async (req, res, next) => {

    // !! Error Handler
    if (req.body.password || req.body.passwordConfirm) {
        return next(new AppError('Sorry Cannot update password from here', 400))
    }

    // ~~ filter fields to only name and email 
    const updates = filterObj(req.body, 'name', 'email')

    // ## Query DB by ID and update user
    const user = await User.findByIdAndUpdate(req.user.id, updates, {
        new: true,
        runValidators: true
    })

    // ^^ Response
    res.status(200).json({
        status: 'success',
        data: {
            user
        }
    })
})

// ~~ Update User (admin)
// WARNING ***** Do not use update route for password *****
exports.updateUser = factory.updateOne(User)

// ~~ Delete User 
exports.deleteMe = catchAsync(async (req, res, next) => {

    // ## Query DB and set active status to false
    await User.findByIdAndUpdate(req.user.id, {
        active: false
    })

    // ^^ Response
    res.status(204).json({
        status: 'success',
        data: null
    })
})

// ~~ Delete User by ID
exports.deleteUser = factory.deleteOne(User)
