// ?????????????????????????????????????????????????????????
// ??????????????????? Error Controller ????????????????????
// ?????????????????????????????????????????????????????????

// ??????????????????? File Modules ????????????????????????
// ?? Utilites
const AppError = require('../utils/appError');

// ??????????????????? Node Modules ????????????????????????

// ??????????????????? Vendor Modules ??????????????????????
const chalk = require('chalk');
const cleanStacktrace = require('clean-stacktrace');


// ??????????????????? Error Handlers ??????????????????????


// !! Cast Erros
const handleCastErrorDB = err => {
    const message = `Invailid ${err.path} ${err.value}`;

    return new AppError(message, 400);
};

// !! Duplicate Fields Error
const handleDuplicateFieldsDB = err => {
    const value = err.errmsg.match(/(["'])(\\?.)*?\1/)[0];
    const message = `Duplicate field value: ${value} Please use another value`
    return new AppError(message, 400)
}

// !! Validation Error
const handleValidationErrorDB = err => {
    const errors = Object.values(err.errors).map(error => {
        return error.message
    })
    const msg = `Invalid input data. ${errors.join('. ')}`
    return new AppError(msg, 400)
}

const handleJWTError = () => {
    return new AppError('Invalid token. Please login in again', 401)
}

const handleJWTEpiredError = () => {
    return new AppError('Your session has expired. Please login in again', 401)
}

// ??????????????????? Error Env ???????????????????????????

// ~~ Development Error Handler
const devError = (err, res) => {

    // !! Log Clean Stack Trace to console
    console.log(err.stack)
    console.log(chalk.red.bold(cleanStacktrace(err.stack)));
    err.stack = cleanStacktrace(err.stack);
    // ^^ Response
    res.status(err.statusCode).json({
        status: err.status,
        message: err.message,
        error: err,
        stack: cleanStacktrace(err.stack)
    });
};

// ~~ Production Error Handler
const prodError = (err, res) => {

    // ~~ Check for operation error
    if (err.isOperational) {

        // ^^ Response
        res.status(err.statusCode).json({
            status: err.status,
            message: err.message
        });
    } else {

        // !! Log Message to Console
        console.log(chalk.red.bold(cleanStacktrace(err.stack)));

        // ^^ Response
        res.status(500).json({
            status: 'error',
            message: 'something we wrong'
        });
    }
};

// !! Global Error handler
module.exports = (err, req, res, next) => {

    // ~~ Set staus and code
    err.statusCode = err.statusCode || 500;
    err.status = err.status || 'error';

    // ~~ Check for node environment
    if (process.env.NODE_ENV === 'development') {

        // !! Develper Error handler
        devError(err, res);
    } else if (process.env.NODE_ENV === 'production') {

        let error = {
            ...err
        };

        // !! Check for Cast Errors
        if (error.name === 'CastError') error = handleCastErrorDB(error);

        // !! Check for Duplicate Field Errors
        if (error.code === 11000) error = handleDuplicateFieldsDB(error);

        // !! Check for Validation Errors
        if (error.name === 'ValidationError') error = handleValidationErrorDB(error)

        if (error.name === 'JsonWebTokenError') error = handleJWTError()

        if (error.name === 'TokenExpiredError') error = handleJWTEpiredError()

        // !! Production Error Handler
        prodError(error, res);
    }
};