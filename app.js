// ?????????????????????????????????????????????????????????
// ??????????????????? Main App ????????????????????????????
// ?????????????????????????????????????????????????????????

// ?? Document title and notes
// ~~ Function
// ^^Requests
// !! Errors
// ## DataBase
// todo

// ?????????????????????????????????????????????????????????
// ??????????????????? Modules ?????????????????????????????
// ?????????????????????????????????????????????????????????

// ??????????????????? File Modules ????????????????????????


// ??????????????????? Node Modules ????????????????????????

const fs = require('fs')
const path = require('path')


// ??????????????????? Vendor Modules ??????????????????????

const chalk = require('chalk');
const express = require('express')
const helmet = require('helmet')



const app = express()
const log = console.log

// ~~ Set Helmet 
app.use(helmet())
// app.use(express.static(path.join(__dirname, './dev-data/data/tours-simple.json')))

// ~~ Set MiddleWare
app.use(express.json())
app.use(express.urlencoded())

const tours = JSON.parse(fs.readFileSync(path.join(__dirname, './dev-data/data/tours-simple.json')))
// ?????????????????????????????????????????????????????????
// ??????????????????? Routes ??????????????????????????????
// ?????????????????????????????????????????????????????????

// ^^ Get All Tours
app.get('/api/tours', (req, res, next) => {

    // ^^ Response
    res.status(200).json({
        status: 'success',
        results: tours.length,
        data: {
            tours
        }
    })
})

// ^^ Get Tour By Id
app.get('/api/tours/:id', (req, res, next) => {

    // ~~ Convert param.id to Number
    const id = req.params.id * 1

    // !! Error Handler For ID
    if (!tour || id > tours.length) {
        res.status(404).json({
            status: 'FAILED',
            message: 'Invaile ID'
        })
    }

    // ~~ Find tour by id
    const tour = tours.find((el => el.id === id))


    // ^^ Response
    res.status(200).json({
        status: 'success',
        data: {
            tour
        }
    })
})

// ^^ Create Tour
app.post('/api/tours', (req, res, next) => {

    // ~~ Create a new id
    const id = tours.length + 1;

    // ~~ create new object with id and req.body
    const newTour = Object.assign({
        id
    }, req.body)

    // ~~ push new tour to tours array
    tours.push(newTour)


    fs.writeFile(path.join(__dirname, 'dev-data/data/tours-simple.json'), JSON.stringify(tours), err => {
        res.status(201).send({
            status: 'success',
            data: {
                tour: newTour
            }
        })
    })
})

// ^^ Update Tour
app.path('/api/tours/:id', (req, res, next) => {

    // ~~ Convert param.id to Number
    const id = req.params.id * 1;

    // !! Error Handler for id
    if (!tour || id > tours.length) {
        res.status(404).json({
            status: 'FAILED',
            message: 'Invaile ID'
        })
    }

    // ^^ Response
    res.status().json({
        status: 'success',
        data: {}
    })
})

// ^^ Delete Tour
app.delete('/api/tours/:id', (req, res, next) => {

    // ~~ Convert param.id to Number
    const id = req.params.id * 1;

    // !! Error Handler for id
    if (!tour || id > tours.length) {
        res.status(404).json({
            status: 'FAILED',
            message: 'Invaile ID'
        })
    }

    // ^^ Response
    res.status(204).json({
        status: 'success',
        data: null
    })
})

// ?????????????????????????????????????????????????????????
// ??????????????????? Server ??????????????????????????????
// ?????????????????????????????????????????????????????????

// ~~ Set Port
const PORT = process.env.PORT || 3000

// ~~ Start App Server
app.listen(PORT, () => {
    log(chalk.green.bold.inverse(`<<<<< App is Running on Port ${PORT} >>>>>`))
})